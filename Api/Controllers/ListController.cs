using System.Diagnostics.CodeAnalysis;
using Microsoft.AspNetCore.Mvc;

namespace ProSoft.DnsBL.Api.Controllers;

[Route("lists")]
[ApiController]
[Produces("application/json")]
public class ListController : ControllerBase, IDisposable
{
    private readonly ILogger<ListController> logger;

    public ListController(ILogger<ListController> logger)
    {
        this.logger = logger;

        if (this.logger.IsEnabled(LogLevel.Debug))
        {
            this.logger.LogDebug("ListController initialized successfully.");
        }
    }

    [HttpGet("")]
    public async Task<string> GetListsAsync(CancellationToken cancellationToken)
    {
        return await Task.FromResult("OK");
    }

    #region IDisposable Interface Implementation

    private bool _disposed;

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    protected virtual void Dispose(bool disposing)
    {
        if (!this._disposed && disposing)
        {
            // Disposing Logic
        }

        this._disposed = true;
    }


    /// <summary>
    /// Finalizes an instance of the <see cref="ListController"/> class.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    ~ListController()
    {
        this.Dispose(false);
    }

    #endregion
}
